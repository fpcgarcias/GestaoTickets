import { db } from './db';
import { sql } from 'drizzle-orm';

interface Migration {
  id: string;
  up: () => Promise<void>;
  down: () => Promise<void>;
}

// Lista vazia de migra√ß√µes - todas foram removidas
const migrations: Migration[] = [];

// Criar tabela de controle de migra√ß√µes se n√£o existir
async function ensureMigrationsTable() {
  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL UNIQUE,
      executed_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now()
    )
  `);
}

// Verificar se uma migra√ß√£o j√° foi executada
async function isMigrationExecuted(migrationName: string): Promise<boolean> {
  const result = await db.execute(sql`
    SELECT COUNT(*) as count 
    FROM migrations 
    WHERE name = ${migrationName}
  `);
  
  return (result.rows[0] as any)?.count > 0;
}

// Marcar migra√ß√£o como executada
async function markMigrationAsExecuted(migrationName: string) {
  await db.execute(sql`
    INSERT INTO migrations (name, executed_at) 
    VALUES (${migrationName}, now())
  `);
}

// Executar todas as migra√ß√µes pendentes
export async function runMigrations() {
  console.log('üîÑ Verificando sistema de migra√ß√µes...');
  
  try {
    // Garantir que a tabela de controle existe
    await ensureMigrationsTable();
    
    // Como n√£o h√° migra√ß√µes na lista, apenas confirmar que o sistema est√° pronto
    console.log('‚úÖ Sistema de migra√ß√µes inicializado (nenhuma migra√ß√£o pendente)');
    
  } catch (error) {
    console.error('‚ùå Erro durante a inicializa√ß√£o do sistema de migra√ß√µes:', error);
    // N√£o lan√ßar erro para n√£o quebrar o startup
  }
}

// Reverter a √∫ltima migra√ß√£o (para desenvolvimento/debug)
export async function rollbackLastMigration() {
  console.log('üîÑ Fun√ß√£o de rollback dispon√≠vel (nenhuma migra√ß√£o ativa)');
  
  try {
    await ensureMigrationsTable();
    
    // Buscar a √∫ltima migra√ß√£o executada
    const result = await db.execute(sql`
      SELECT name 
      FROM migrations 
      ORDER BY executed_at DESC 
      LIMIT 1
    `);
    
    if (result.rows.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhuma migra√ß√£o para reverter');
      return;
    }
    
    const lastMigrationName = (result.rows[0] as any).name;
    console.log(`‚ÑπÔ∏è  √öltima migra√ß√£o registrada: ${lastMigrationName} (sem c√≥digo de rollback dispon√≠vel)`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o de rollback:', error);
  }
}

// Listar status das migra√ß√µes
export async function listMigrationStatus() {
  console.log('üìã Sistema de migra√ß√µes limpo - nenhuma migra√ß√£o ativa');
  
  try {
    await ensureMigrationsTable();
    
    // Verificar se h√° migra√ß√µes antigas registradas
    const result = await db.execute(sql`
      SELECT name, executed_at 
      FROM migrations 
      ORDER BY executed_at DESC
    `);
    
    if (result.rows.length > 0) {
      console.log('üìú Migra√ß√µes hist√≥ricas encontradas:');
      for (const row of result.rows) {
        const migrationRow = row as any;
        console.log(`  ${migrationRow.name}: executada em ${migrationRow.executed_at}`);
      }
    } else {
      console.log('üìã Nenhuma migra√ß√£o registrada no hist√≥rico');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao listar status das migra√ß√µes:', error);
  }
} 