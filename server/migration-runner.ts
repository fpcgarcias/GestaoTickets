import { db } from './db';
import { sql } from 'drizzle-orm';

// Importar todas as migra√ß√µes
import * as migration20241228 from './migrations/20241228-fix-database-structure';
import * as migration20241229 from './migrations/20241229-add-description-to-incident-types';
import * as migration20241229Performance from './migrations/20241229-performance-indexes';

interface Migration {
  id: string;
  up: () => Promise<void>;
  down: () => Promise<void>;
}

// Lista de todas as migra√ß√µes em ordem cronol√≥gica
const migrations: Migration[] = [
  {
    id: '20241228-fix-database-structure',
    up: migration20241228.up,
    down: migration20241228.down
  },
  {
    id: '20241229-add-description-to-incident-types',
    up: migration20241229.up,
    down: migration20241229.down
  },
  {
    id: '20241229-performance-indexes',
    up: migration20241229Performance.up,
    down: migration20241229Performance.down
  }
];

// Criar tabela de controle de migra√ß√µes se n√£o existir
async function ensureMigrationsTable() {
  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL UNIQUE,
      executed_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now()
    )
  `);
}

// Verificar se uma migra√ß√£o j√° foi executada
async function isMigrationExecuted(migrationName: string): Promise<boolean> {
  const result = await db.execute(sql`
    SELECT COUNT(*) as count 
    FROM migrations 
    WHERE name = ${migrationName}
  `);
  
  return result.rows[0]?.count > 0;
}

// Marcar migra√ß√£o como executada
async function markMigrationAsExecuted(migrationName: string) {
  await db.execute(sql`
    INSERT INTO migrations (name, executed_at) 
    VALUES (${migrationName}, now())
  `);
}

// Executar todas as migra√ß√µes pendentes
export async function runMigrations() {
  console.log('üîÑ Verificando migra√ß√µes pendentes...');
  
  try {
    // Garantir que a tabela de controle existe
    await ensureMigrationsTable();
    
    let migrationsExecuted = 0;
    
    for (const migration of migrations) {
      const isExecuted = await isMigrationExecuted(migration.id);
      
      if (!isExecuted) {
        console.log(`üìù Executando migra√ß√£o: ${migration.id}`);
        
        try {
          await migration.up();
          await markMigrationAsExecuted(migration.id);
          migrationsExecuted++;
          
          console.log(`‚úÖ Migra√ß√£o ${migration.id} executada com sucesso`);
        } catch (error) {
          console.error(`‚ùå Erro ao executar migra√ß√£o ${migration.id}:`, error);
          throw error;
        }
      } else {
        console.log(`‚è≠Ô∏è  Migra√ß√£o ${migration.id} j√° foi executada`);
      }
    }
    
    if (migrationsExecuted > 0) {
      console.log(`üéâ ${migrationsExecuted} migra√ß√£o(√µes) executada(s) com sucesso!`);
    } else {
      console.log('‚úÖ Todas as migra√ß√µes j√° est√£o atualizadas');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o das migra√ß√µes:', error);
    throw error;
  }
}

// Reverter a √∫ltima migra√ß√£o (para desenvolvimento/debug)
export async function rollbackLastMigration() {
  console.log('üîÑ Revertendo √∫ltima migra√ß√£o...');
  
  try {
    await ensureMigrationsTable();
    
    // Buscar a √∫ltima migra√ß√£o executada
    const result = await db.execute(sql`
      SELECT name 
      FROM migrations 
      ORDER BY executed_at DESC 
      LIMIT 1
    `);
    
    if (result.rows.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhuma migra√ß√£o para reverter');
      return;
    }
    
    const lastMigrationName = result.rows[0].name;
    const migration = migrations.find(m => m.id === lastMigrationName);
    
    if (!migration) {
      console.error(`‚ùå Migra√ß√£o ${lastMigrationName} n√£o encontrada no c√≥digo`);
      return;
    }
    
    console.log(`üìù Revertendo migra√ß√£o: ${lastMigrationName}`);
    
    try {
      await migration.down();
      
      // Remover da tabela de controle
      await db.execute(sql`
        DELETE FROM migrations 
        WHERE name = ${lastMigrationName}
      `);
      
      console.log(`‚úÖ Migra√ß√£o ${lastMigrationName} revertida com sucesso`);
    } catch (error) {
      console.error(`‚ùå Erro ao reverter migra√ß√£o ${lastMigrationName}:`, error);
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a revers√£o da migra√ß√£o:', error);
    throw error;
  }
}

// Listar status das migra√ß√µes
export async function listMigrationStatus() {
  console.log('üìã Status das migra√ß√µes:');
  
  try {
    await ensureMigrationsTable();
    
    for (const migration of migrations) {
      const isExecuted = await isMigrationExecuted(migration.id);
      const status = isExecuted ? '‚úÖ Executada' : '‚è≥ Pendente';
      console.log(`  ${migration.id}: ${status}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao listar status das migra√ß√µes:', error);
    throw error;
  }
} 