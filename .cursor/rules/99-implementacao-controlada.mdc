---
description:
globs:
alwaysApply: false
---
# Controle de Implementa√ß√£o Autom√°tica

## ‚ö†Ô∏è REGRA CR√çTICA: SEMPRE PERGUNTAR ANTES DE IMPLEMENTAR

### Princ√≠pio Fundamental
**NUNCA implemente, instale ou execute qualquer coisa sem EXPLICITAMENTE perguntar ao usu√°rio primeiro.**

## üö´ Proibi√ß√µes Espec√≠ficas

### 1. Instala√ß√£o de Depend√™ncias PostgreSQL
- **NUNCA** sugira ou instale: `pg`, `node-postgres`, `postgresql`, `postgres`
- **RAZ√ÉO**: Este projeto usa banco Neon (PostgreSQL gerenciado)
- **ALTERNATIVA**: Usar as conex√µes j√° configuradas com Neon

### 2. Execu√ß√£o de Scripts NPM
- **NUNCA** execute automaticamente:
  - `npm run dev` (j√° est√° rodando)
  - `npm run build` (ambiente de desenvolvimento)
  - `npm start`
  - `npm install` (sem confirma√ß√£o)
  - Qualquer script do [package.json](mdc:package.json)

### 3. Comandos de Terminal
- **NUNCA** execute comandos sem aprova√ß√£o:
  - Instala√ß√£o de pacotes
  - Comandos de build/compila√ß√£o
  - Inicializa√ß√£o de servi√ßos
  - Modifica√ß√£o de arquivos de configura√ß√£o

## ‚úÖ Protocolo Obrigat√≥rio

### Antes de Qualquer Implementa√ß√£o:
1. **PERGUNTE EXPLICITAMENTE**: "Posso implementar [DESCRI√á√ÉO ESPEC√çFICA]?"
2. **EXPLIQUE O MOTIVO**: Por que essa implementa√ß√£o √© necess√°ria
3. **AGUARDE CONFIRMA√á√ÉO**: N√£o prossiga sem aprova√ß√£o expl√≠cita
4. **OFERE√áA ALTERNATIVAS**: Quando poss√≠vel, apresente op√ß√µes

### Exemplo de Abordagem Correta:
```
"Identifiquei que precisamos conectar ao banco de dados. 
Posso usar a configura√ß√£o Neon j√° existente em [db/index.ts](mdc:db/index.ts)
ou voc√™ gostaria de uma abordagem diferente?"
```

### Exemplo de Abordagem INCORRETA:
```
"Vou instalar o pacote pg para conectar ao PostgreSQL..."
"Executando npm run build..."
```

## üéØ Contexto do Projeto

### Banco de Dados
- **Tecnologia**: Neon (PostgreSQL gerenciado)
- **Configura√ß√£o**: J√° est√° em [drizzle.config.ts](mdc:drizzle.config.ts)
- **Conex√£o**: Configurada em [db/](mdc:db/)

### Ambiente de Desenvolvimento
- **Status**: `npm run dev` j√° est√° executando
- **Objetivo**: Desenvolvimento ativo, n√£o produ√ß√£o
- **Vite**: Configurado em [vite.config.ts](mdc:vite.config.ts)

### Arquitetura
- **Frontend**: React com TypeScript
- **Backend**: Node.js com Express
- **Database**: Drizzle ORM com Neon PostgreSQL
- **Build**: Vite para desenvolvimento

## üîç Checklist de Valida√ß√£o

Antes de qualquer sugest√£o, pergunte-se:
- [ ] Isso realmente precisa ser implementado?
- [ ] J√° existe uma solu√ß√£o similar no projeto?
- [ ] O usu√°rio solicitou essa implementa√ß√£o espec√≠fica?
- [ ] Estou seguindo as tecnologias j√° estabelecidas?
- [ ] Perguntei ao usu√°rio antes de prosseguir?

## üìã Exce√ß√µes

### Quando N√ÉO perguntar:
- Explica√ß√µes de c√≥digo existente
- An√°lise de problemas
- Sugest√µes de melhorias (sem implementar)
- Documenta√ß√£o
- Debugging de c√≥digo j√° escrito

### Quando SEMPRE perguntar:
- Qualquer nova implementa√ß√£o
- Instala√ß√£o de depend√™ncias
- Execu√ß√£o de comandos
- Modifica√ß√£o de arquivos
- Cria√ß√£o de novos arquivos
- Altera√ß√£o de configura√ß√µes

---

**LEMBRE-SE**: Prefira ser um consultor que pergunta a um implementador que assume.
